FILE: Sources/llminty/IgnoreMatcher.swift

import Foundation
/// Minimal gitignore-like engine with globs (* ? **), dir-trailing '/', root-anchored '/' and negation '!'
/// Evaluation order: built-ins first (exclude bias), then user's .mintyignore (last match wins)
struct IgnoreMatcher {
struct Pattern {
let negated: Bool
let dirOnly: Bool
let anchorRoot: Bool
let raw: String
let segments: [String] // split on '/'
}
private let ordered: [Pattern]
init(builtInPatterns: [String], userFileText: String) throws {
var list: [Pattern] = []
for p in builtInPatterns { if let pat = Self.parse(line: p) { list.append(pat) } }
for line in userFileText.components(separatedBy: .newlines) {
if let pat = Self.parse(line: line) { list.append(pat) }
}
self.ordered = list
}
// MARK: - Parser
private static func parse(line: String) -> Pattern? { /* elided-implemented; lines=19; h=4e7a37ce40 */ }
// MARK: - Eval
func isIgnored(_ relativePath: String, isDirectory: Bool) -> Bool { /* elided-implemented; lines=26; h=b02b377c1d */ }
private static func match(pattern p: Pattern, pathSegments: [String]) -> Bool { /* elided-implemented; lines=2; h=94afdfd102 */ }
// Segment matcher for '*' and '?'
private static func matchSegment(_ pat: String, _ txt: String) -> Bool { /* elided-implemented; lines=30; h=ad8154ec0f */ }
// '**' matches zero or more segments. '*' matches within a segment (no '/').
private static func matchFrom(patternSegs: [String], pathSegs: [String], startAt: Int) -> Bool { /* elided-implemented; lines=20; h=c66eff7e46 */ }
}
FILE: Sources/llminty/FileScanner.swift

import Foundation
enum FileKind {
case swift, json, text, binary, unknown
}
struct RepoFile {
let relativePath: String
let absoluteURL: URL
let isDirectory: Bool
let kind: FileKind
let size: UInt64
}
enum ScanLimits {
static let maxFileBytes: UInt64 = 2 * 1024 * 1024 // 2 MB per file cap
}
struct FileScanner {
let root: URL
let matcher: IgnoreMatcher
func scan() throws -> [RepoFile] {
var results: [RepoFile] = []
let fm = FileManager.default
guard let enumerator = fm.enumerator(
at: root,
includingPropertiesForKeys: [.isDirectoryKey, .fileSizeKey],
options: [.skipsHiddenFiles],
errorHandler: { _, _ in true } // keep going
) else {
throw NSError(domain: "llminty", code: 1, userInfo: [NSLocalizedDescriptionKey: "Failed to enumerate directory"])
}
for case let url as URL in enumerator {
let rel = (url.path).path(replacingBase: root.path)
// Never include leading slash
let relClean = rel.hasPrefix("/") ? String(rel.dropFirst()) : rel
let rIsDir = (try? url.resourceValues(forKeys: [.isDirectoryKey]).isDirectory) ?? false
if matcher.isIgnored(relClean, isDirectory: rIsDir) {
if rIsDir { enumerator.skipDescendants() }
continue
}
if rIsDir { continue }
let size = (try? url.resourceValues(forKeys: [.fileSizeKey]).fileSize).map { UInt64($0) } ?? 0
let ext = url.pathExtension.lowercased()
let kind: FileKind
switch ext {
case "swift": kind = .swift
case "json":  kind = .json
case "md", "yml", "yaml", "xml", "plist", "txt", "sh", "toml": kind = .text
default:
if size > ScanLimits.maxFileBytes { kind = .binary }
else if Self.seemsBinary(url: url) { kind = .binary }
else { kind = .unknown }
}
results.append(RepoFile(relativePath: relClean, absoluteURL: url, isDirectory: false, kind: kind, size: size))
}
// Deterministic stable path sort
results.sort { $0.relativePath < $1.relativePath }
return results
}
static func seemsBinary(url: URL) -> Bool { /* elided-implemented; lines=11; h=4efe0be34c */ }
}
// MARK: - Path helpers
private extension String {
func removingPrefix(_ p: String) -> String {
guard hasPrefix(p) else { return self }
return String(dropFirst(p.count))
}
func relativePath(from root: String) -> String { /* elided-implemented; lines=5; h=e54011b7db */ }
}
extension String {
func path(replacingBase base: String) -> String { /* elided-implemented; lines=3; h=f1007fba7b */ }
}
FILE: Sources/llminty/SwiftAnalyzer.swift

import Foundation
import SwiftParser
import SwiftSyntax
// MARK: - Intermediate models
struct AnalyzedFile {
let file: RepoFile
let text: String
var declaredTypes: Set<String>
var publicAPIScoreRaw: Int
var referencedTypes: [String: Int] // name -> occurrences
var complexity: Int
var isEntrypoint: Bool
var outgoingFileDeps: [String]
var inboundRefCount: Int
}
// MARK: - Analyzer
final class SwiftAnalyzer {
func analyze(files: [RepoFile]) throws -> [AnalyzedFile] {
// Parse only Swift files
var analyzed: [AnalyzedFile] = []
analyzed.reserveCapacity(files.count)
for f in files where f.kind == .swift {
let text = (try? String(contentsOf: f.absoluteURL, encoding: .utf8)) ?? ""
let a = analyzeSwift(path: f.relativePath, text: text)
analyzed.append(a)
}
// Map declared types -> file
var typeToFile: [String: String] = [:]
for a in analyzed {
for t in a.declaredTypes { typeToFile[t, default: a.file.relativePath] = a.file.relativePath }
}
// Compute outgoing deps via referenced type â†’ declared type mapping
for i in analyzed.indices {
var deps = Set<String>()
for (name, _) in analyzed[i].referencedTypes {
if let depPath = typeToFile[name], depPath != analyzed[i].file.relativePath {
deps.insert(depPath)
}
}
analyzed[i].outgoingFileDeps = Array(deps).sorted()
}
// Compute inbound counts
var inbound: [String: Int] = [:]
for a in analyzed {
for dep in a.outgoingFileDeps { inbound[dep, default: 0] += 1 }
}
for i in analyzed.indices {
analyzed[i].inboundRefCount = inbound[analyzed[i].file.relativePath] ?? 0
}
return analyzed
}
private func analyzeSwift(path: String, text: String) -> AnalyzedFile { /* elided-implemented; lines=17; h=8a969177df */ }
}
// MARK: - Collector with SwiftSyntax
private struct CollectorContext {
var declaredTypes: Set<String> = []
var publicAPIScoreRaw: Int = 0
var referencedTypes: [String: Int] = [:]
var complexity: Int = 0
var isEntrypoint: Bool = false
var importedModules: Set<String> = []
var hasTopLevelCode: Bool = false
}
private final class SwiftCollector: SyntaxVisitor {
private var ctx: UnsafeMutablePointer<CollectorContext>
private var typeStack: [String] = []
init(context: inout CollectorContext)  {
self.ctx = withUnsafeMutablePointer(to: &context) { $0 }
super.init(viewMode: .sourceAccurate)
}
override func visit(_ node: ImportDeclSyntax) -> SyntaxVisitorContinueKind  { /* elided-implemented; lines=3; h=f0184bd518 */ }
override func visit(_ node: StructDeclSyntax) -> SyntaxVisitorContinueKind  { /* elided-implemented; lines=7; h=a10c260cbd */ }
override func visitPost(_ node: StructDeclSyntax)  { /* elided-implemented; lines=1; h=4ae29d9258 */ }
override func visit(_ node: ClassDeclSyntax) -> SyntaxVisitorContinueKind  { /* elided-implemented; lines=6; h=f5ee228832 */ }
override func visitPost(_ node: ClassDeclSyntax)  { /* elided-implemented; lines=1; h=4ae29d9258 */ }
override func visit(_ node: EnumDeclSyntax) -> SyntaxVisitorContinueKind  { /* elided-implemented; lines=6; h=f5ee228832 */ }
override func visitPost(_ node: EnumDeclSyntax)  { /* elided-implemented; lines=1; h=4ae29d9258 */ }
override func visit(_ node: ProtocolDeclSyntax) -> SyntaxVisitorContinueKind  { /* elided-implemented; lines=6; h=37a2ce214e */ }
override func visitPost(_ node: ProtocolDeclSyntax)  { /* elided-implemented; lines=1; h=4ae29d9258 */ }
override func visit(_ node: AttributeSyntax) -> SyntaxVisitorContinueKind  { /* elided-implemented; lines=3; h=1acf794c06 */ }
override func visit(_ node: SourceFileSyntax) -> SyntaxVisitorContinueKind  { /* elided-implemented; lines=8; h=ab982e0809 */ }
override func visitPost(_ node: SourceFileSyntax)  { /* empty */ }
// Types referenced
override func visit(_ node: IdentifierTypeSyntax) -> SyntaxVisitorContinueKind  { /* elided-implemented; lines=4; h=24b682256a */ }
override func visit(_ node: MemberTypeSyntax) -> SyntaxVisitorContinueKind  { /* elided-implemented; lines=4; h=cba4a290e5 */ }
// Complexity: count control-flow keywords and boolean ops
override func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind  { /* elided-implemented; lines=11; h=6dcde8b382 */ }
}
// MARK: - Small helpers
// Make this module-internal so Rendering.swift can reuse it
extension DeclModifierListSyntax {
var containsPublicOrOpen: Bool { /* empty */ }
}
extension Optional where Wrapped == DeclModifierListSyntax {
var containsPublicOrOpen: Bool { /* empty */ }
}
private extension StructDeclSyntax {
func inheritanceClauseContains(type: String) -> Bool  {
if let clause = self.inheritanceClause {
for it in clause.inheritedTypes {
if it.type.trimmedDescription == type { return true }
}
}
return false
}
}
FILE: Sources/llminty/Scoring.swift

import Foundation
struct ScoredFile {
let analyzed: AnalyzedFile
let score: Double
let fanIn: Int
let pageRank: Double
}
final class Scoring {
struct Norm {
var fanInMax = 0
var pageRankMax = 0.0
var apiMax = 0
var influenceMax = 0
var complexityMax = 0
}
/// Compute a composite [0,1] score for each file.
/// Heuristics balance inbound references, PageRank, public API surface, "influence"
/// (outgoing refs) and measured complexity; + entrypoint bonus.
func score(analyzed: [AnalyzedFile]) -> [ScoredFile] {
// Precompute PR and fan-in
let pr = GraphCentrality.pageRank(analyzed)
var fanIn: [String: Int] = [:]
for a in analyzed {
fanIn[a.file.relativePath] = a.inboundRefCount
}
// Collect maxima for normalization
var norm = Norm()
for a in analyzed {
norm.fanInMax = max(norm.fanInMax, fanIn[a.file.relativePath] ?? 0)
norm.pageRankMax = max(norm.pageRankMax, pr[a.file.relativePath] ?? 0.0)
norm.apiMax = max(norm.apiMax, a.publicAPIScoreRaw)
// "Influence": number of distinct outgoing file deps (fan-out)
norm.influenceMax = max(norm.influenceMax, a.outgoingFileDeps.count)
norm.complexityMax = max(norm.complexityMax, a.complexity)
}
// Safe division
func nzDiv(_ num: Double, by den: Double) -> Double { /* elided-implemented; lines=1; h=e77d0ba337 */ }
var out: [ScoredFile] = []
out.reserveCapacity(analyzed.count)
for a in analyzed {
let fanInN   = nzDiv(Double(fanIn[a.file.relativePath] ?? 0), by: Double(norm.fanInMax))
let prN      = nzDiv(pr[a.file.relativePath] ?? 0.0, by: norm.pageRankMax)
let apiN     = nzDiv(Double(a.publicAPIScoreRaw), by: Double(norm.apiMax))
let inflN    = nzDiv(Double(a.outgoingFileDeps.count), by: Double(norm.influenceMax))
let cxN      = nzDiv(Double(a.complexity), by: Double(norm.complexityMax))
let entry    = a.isEntrypoint ? 1.0 : 0.0
// Weights: 5 equally weighted primary signals + entrypoint bonus
let score =
0.18 * fanInN +
0.18 * prN +
0.18 * apiN +
0.18 * inflN +
0.18 * cxN +
0.10 * entry
out.append(
ScoredFile(
analyzed: a,
score: max(0.0, min(1.0, score)),
fanIn: fanIn[a.file.relativePath] ?? 0,
pageRank: pr[a.file.relativePath] ?? 0.0
)
)
}
return out
}
}
FILE: Sources/llminty/GraphCentrality.swift

import Foundation
enum GraphCentrality {
// PageRank on file dependency graph (A -> B means A depends on B)
static func pageRank(_ analyzed: [AnalyzedFile],
damping: Double = 0.85,
iterations: Int = 20) -> [String: Double] {
let files: [String] = analyzed.map { $0.file.relativePath }
let index: [String: Int] = Dictionary(uniqueKeysWithValues: files.enumerated().map { ($1, $0) })
let n = files.count
guard n > 0 else { return [:] }
// Outgoing edges (by index)
var outEdges: [Set<Int>] = Array(repeating: [], count: n)
for a in analyzed {
let i = index[a.file.relativePath]!
for dep in a.outgoingFileDeps {
if let j = index[dep] { outEdges[i].insert(j) }
}
}
// Init PR
var pr = Array(repeating: 1.0 / Double(n), count: n)
var newPR = Array(repeating: 0.0, count: n)
let base = (1.0 - damping) / Double(n)
for _ in 0..<iterations {
// Distribute rank
for i in 0..<n { newPR[i] = base }
for i in 0..<n {
let outs = outEdges[i]
if outs.isEmpty {
// Dangling node: spread evenly
let share = damping * pr[i] / Double(n)
for j in 0..<n { newPR[j] += share }
} else {
let share = damping * pr[i] / Double(outs.count)
for j in outs { newPR[j] += share }
}
}
pr = newPR
}
// Map back to paths
var out: [String: Double] = [:]
for (p, i) in index { out[p] = pr[i] }
return out
}
/// Dependency-aware emission order:
/// If A depends on B, emit B before A. When multiple nodes are available,
/// prefer higher score, then lexicographic path.
static func orderDependencyAware(_ scored: [ScoredFile]) -> [ScoredFile]  { /* elided-implemented; lines=58; h=ac9ea5288b */ }
}
FILE: Sources/llminty/Rendering.swift

import Foundation
import SwiftParser
import SwiftSyntax
struct RenderedFile {
let relativePath: String
let content: String
}
final class Renderer {
func render(file: ScoredFile, score: Double) throws -> RenderedFile { /* elided-implemented; lines=18; h=36ac1ba876 */ }
// MARK: - Text compaction
/// For .text / .unknown: trim trailing spaces per line, collapse runs of blank lines to a single blank.
private func compactText(_ s: String) -> String  { /* elided-implemented; lines=17; h=fde0fa5134 */ }
/// For Swift bodies: a gentle pass that trims trailing spaces and collapses 3+ blank lines to 2.
private func lightlyCondenseWhitespace(_ s: String) -> String  { /* elided-implemented; lines=3; h=1915e1f8b0 */ }
// MARK: - Swift policies
enum SwiftPolicy {
case keepAllBodiesLightlyCondensed            // s â‰¥ 0.75
case keepPublicBodiesElideOthers              // 0.50 â‰¤ s < 0.75
case keepOneBodyPerTypeElideRest              // 0.25 â‰¤ s < 0.50
case signaturesOnly                           // s < 0.25
}
func policyFor(score: Double) -> SwiftPolicy  { /* elided-implemented; lines=5; h=ba32b2f94c */ }
// MARK: - Swift rendering (mechanical, deterministic elision)
/// Mechanically elide Swift function/initializer/subscript bodies according to policy.
/// Uses SwiftSyntax rewriting to preserve signatures verbatim.
func renderSwift(text: String, policy: SwiftPolicy) throws -> String  { /* elided-implemented; lines=106; h=2d0af78461 */ }
}
extension StringProtocol {
var isNewline: Bool { /* elided-implemented; lines=0; h=cbf29ce484 */ }
}
FILE: Sources/llminty/App.swift

import Foundation
enum BuiltInExcludes {
static func defaultPatterns(outputFileName: String) -> [String] { /* elided-implemented; lines=22; h=d813ebcf2d */ }
}
/// Aggressively trims blank lines for final output while keeping exactly one
/// blank line after each "FILE: " header. Also:
/// - trims trailing spaces,
/// - collapses 3+ newlines to 2 during pre-pass,
/// - removes all other blank-only lines.
/// Returns a string that always ends with a single trailing newline.
func postProcessMinty(_ s: String) -> String { /* elided-implemented; lines=29; h=88390ad5df */ }
public struct LLMintyApp {
public init() { /* elided-implemented; lines=0; h=cbf29ce484 */ }
public func run() throws  { /* elided-implemented; lines=44; h=7b2ca81822 */ }
}
FILE: Tests/LLMintyTests/GraphCentralityTests.swift

import XCTest
@testable import llminty
final class GraphCentralityTests: XCTestCase {
private func analyzed(_ path: String, deps: [String]) -> AnalyzedFile { /* elided-implemented; lines=12; h=5f62342345 */ }
func testDependencyAwareOrder() { /* elided-implemented; lines=9; h=28bdf54f34 */ }
}
FILE: Sources/llminty/JSONReducer.swift

import Foundation
enum JSONReducer {
// Head/Tail sample sizes
private static let head = 3
private static let tail = 2
private static let dictKeep = 6
static func reduceJSONPreservingStructure(text: String) -> String  { /* elided-implemented; lines=11; h=d39309f81a */ }
private static func reduce(_ v: Any, seen: Set<ObjectIdentifier>) -> Any  { /* elided-implemented; lines=4; h=5880122551 */ }
private static func reduceArray(_ a: [Any], seen: Set<ObjectIdentifier>) -> Any  { /* elided-implemented; lines=9; h=c53be8bb5a */ }
private static func reduceDict(_ d: [String: Any], seen: Set<ObjectIdentifier>) -> Any  { /* elided-implemented; lines=16; h=1bc6d3eaed */ }
private static func stringify(_ v: Any) -> String  { /* elided-implemented; lines=39; h=b5849adf82 */ }
private static func escape(_ s: String) -> String  { /* elided-implemented; lines=14; h=45778f2768 */ }
}
FILE: Sources/llminty/main.swift

import Foundation
// Top-level entrypoint for the executable target.
// (Do NOT use @main if the module has any other top-level code.)
do {
try LLMintyApp().run()
} catch {
fputs("llminty: \(error.localizedDescription)\n", stderr)
exit(1)
}
FILE: Tests/LLMintyTests/SwiftAnalyzerTests.swift

import XCTest
@testable import llminty
final class SwiftAnalyzerTests: XCTestCase {
func testEntrypointPublicAPIAndRefs() throws { /* elided-implemented; lines=43; h=d32483cee6 */ }
}
FILE: Tests/LLMintyTests/LLMintyTests.swift

import XCTest
@testable import llminty
final class LLMintyTests: XCTestCase {
// End-to-end: builds a mini project, runs the app, checks minty.txt framing and ignore behavior.
func testEndToEndRunCreatesMintyFile() throws { /* elided-implemented; lines=42; h=42dc501e55 */ }
// Compaction policy: keep exactly one blank line after each FILE header, drop others,
// but allow a single terminal blank line (trailing newline in the file).
func testKeepsOneBlankAfterHeadersAndDropsOthers() { /* elided-implemented; lines=51; h=7911489478 */ }
}
FILE: Tests/LLMintyTests/RenderingTests.swift

import XCTest
@testable import llminty
final class RenderingTests: XCTestCase {
func testPolicyForThresholds() { /* elided-implemented; lines=7; h=fe57fa5068 */ }
func testRenderSwiftElidesNonPublicBodiesUnderPolicy() throws { /* elided-implemented; lines=21; h=b666e7f5f8 */ }
func testRenderTextCompactsWhitespace() throws { /* elided-implemented; lines=13; h=a7c2feb995 */ }
}
FILE: Tests/LLMintyTests/ScoringTests.swift

import XCTest
@testable import llminty
final class ScoringTests: XCTestCase {
func testScoringWeightsAndEntrypointBonus() { /* elided-implemented; lines=32; h=60f6a9487d */ }
}
FILE: Package.resolved

{
"originHash" : "fafcfb29799827807329c51102552f0f529ef7ef4c8dffc7051b9365efb15aa9",
"pins" : [
{
"identity" : "swift-syntax",
"kind" : "remoteSourceControl",
"location" : "https://github.com/swiftlang/swift-syntax.git",
"state" : {
"revision" : "f99ae8aa18f0cf0d53481901f88a0991dc3bd4a2",
"version" : "601.0.1"
}
}
],
"version" : 3
}
FILE: Package.swift

// swift-tools-version: 6.0
import PackageDescription
let package = Package(
name: "LLMinty",
platforms: [
.macOS(.v13)
],
products: [
.executable(name: "llminty", targets: ["llminty"])
],
dependencies: [
// Match your Swift 6.1 toolchain. 601.x == SwiftSyntax for Swift 6.1
.package(url: "https://github.com/swiftlang/swift-syntax.git", exact: "601.0.1")
],
targets: [
.executableTarget(
name: "llminty",
dependencies: [
.product(name: "SwiftParser", package: "swift-syntax"),
.product(name: "SwiftSyntax", package: "swift-syntax")
],
path: "Sources/llminty"
),
.testTarget(
name: "LLMintyTests",
dependencies: ["llminty"],
path: "Tests/LLMintyTests"
)
]
)
FILE: README.md

# LLMinty
Single-command CLI to emit a token-efficient bundle of a Swift repository for LLMs.
- **Command:** `llminty` (no args)
- **Output:** `./minty.txt`
- **Ignore file:** `.mintyignore` (gitignore semantics: globs, `!` negation, `/`-anchored, dir `/` suffix, `#` comments)
- **Deterministic:** Given the same repo & ignore, output is deterministic.
## Install
```bash
git clone <your fork>
cd LLMinty
swift build -c release
cp .build/release/llminty /usr/local/bin/
````
> If SwiftSyntax version mismatches your toolchain, pin `swift-syntax` to your local Swiftâ€™s compatible tag.
## Use
```bash
cd /path/to/your/swift/repo
llminty
# -> prints: Created ./minty.txt (<n> files)
```
```
---
### How this satisfies your spec (with your requested customizations)
- **CLI name:** `llminty` (binary); project name **LLMinty**.
- **Output file:** `minty.txt` (at repo root).
- **Ignore file:** `.mintyignore` (gitignore semantics, including `!` reâ€‘include and dir patterns).
- **Builtâ€‘in safe excludes:** Implemented in `BuiltInExcludes.swift`, including selfâ€‘exclude of `minty.txt`; users can reâ€‘include via negation.
- **Highâ€‘level flow:** Implemented endâ€‘toâ€‘end in `App.run()`.
- **Ranking (0â€“1):** Uses AST/graphâ€‘only signals:
- Fanâ€‘in and PageRank centrality over file dependency graph (`GraphCentrality`).
- Public API surface (public/open, protocols Ã—2).
- Type/protocol influence (inbound refs to declared types).
- Complexity via cyclomatic proxies (controlâ€‘flow nodes, boolean ops).
- Entrypoint indicator (`@main`, SwiftUI `App`, or topâ€‘level code).
- **Rendering (tokenâ€‘minimized):**
- **Swift:** Always preserves signatures, generics/where clauses, conformances, access modifiers, and imports. Bodies are retained or elided per score thresholds; very long bodies trimmed in place. Oneâ€‘bodyâ€‘perâ€‘type enforced where applicable.
- **JSON:** Keeps representative subset, head+tail arrays, with `// trimmed ...` notes; preserves order.
- **Other text/binaries:** Condensed or replaced with compact placeholders with type/size.
- **Ordering:** Dependencyâ€‘aware topo order; tieâ€‘break by higher score, then stable path.
- **Deterministic:** Stable scans, stable path sort, deterministic conflict resolution.
- **Performance:** Directory shortâ€‘circuiting; 2 MB perâ€‘file cap; binary detection; no traversal outside CWD.
- **Security & Safety:** Never leaves working directory; unknown extensions treated as nonâ€‘text.
- **CLI UX:** On success prints **exactly**:
FILE: Tests/LLMintyTests/FileScannerTests.swift

// Tests/LLMintyTests/FileScannerTests.swift
import XCTest
@testable import llminty
final class FileScannerTests: XCTestCase {
func testScanningKindsAndIgnores() throws { /* elided-implemented; lines=42; h=c56fdba17f */ }
}
FILE: Tests/LLMintyTests/IgnoreMatcherTests.swift

import XCTest
@testable import llminty
final class IgnoreMatcherTests: XCTestCase {
func testGlobAnchorsAndNegation() throws { /* elided-implemented; lines=31; h=2322aec199 */ }
}
FILE: Tests/LLMintyTests/JSONReducerTests.swift

import XCTest
@testable import llminty
final class JSONReducerTests: XCTestCase {
func testArrayAndDictReduction() { /* elided-implemented; lines=8; h=95d2f4c15d */ }
func testPassThroughOnInvalidJSON() { /* elided-implemented; lines=4; h=50098d33dd */ }
}
